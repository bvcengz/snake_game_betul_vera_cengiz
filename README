## Introduction
# Goal of the Coursework
The goal of this coursework is to design and implement a classic Snake game using Python and Pygame. The coursework involves creating an interactive game where a snake moves around the screen, grows longer as it eats food, and ends the game if it collides with itself or the screen boundaries.

#Topic Description
The topic of this coursework is game development, specifically focusing on creating a functional and engaging version of the Snake game. The implementation includes essential game mechanics such as snake movement, food generation, collision detection, and score tracking.

#Application Description
The application is a Snake game where the player controls a snake to eat food that appears randomly on the screen. Each time the snake eats food, it grows longer, and the player's score increases. The game ends if the snake collides with itself or the screen's edges.

#How to Run the Program?
To run the program, follow these steps:

1-Download Python and Pygame on your system.
2-Download the project files from the GitHub repository.
3-Navigate to the directory containing the project files and run the code file.

#How to Use the Program?
Use the arrow keys on your keyboard to control the direction of the snake (UP, DOWN, LEFT, RIGHT).
Press ENTER to start the game.
Guide the snake to eat the food that appears on the screen.
Avoid colliding with the snake's own body and the screen's edges.
Press ENTER to restart the game if it ends.

## Body/Analysis
Program Implementation
The program is implemented using Python and Pygame, an easy-to-use library for game development. The key components of the game include the Snake, Food, and Game classes.


# Polymorphism
```python

class Food(ABC):
    
    def __init__(self):
        self.position = (random.randint(0, (WIDTH - CELL_SIZE) // CELL_SIZE) * CELL_SIZE,
                         random.randint(0, (HEIGHT - CELL_SIZE) // CELL_SIZE) * CELL_SIZE)

    @abstractmethod
    def draw(self):
        pass

class RegularFood(Food):
    
    def draw(self):
        pygame.draw.rect(SCREEN, DARK_BLUE, pygame.Rect(self.position[0], self.position[1], CELL_SIZE, CELL_SIZE))
```


#Inheritance

```python
class RegularFood(Food):
    
    def draw(self):
        pygame.draw.rect(SCREEN, DARK_BLUE, pygame.Rect(self.position[0], self.position[1], CELL_SIZE, CELL_SIZE))
```


# Abstraction

```python
class Food(ABC):
    
    def __init__(self):
        self.position = (random.randint(0, (WIDTH - CELL_SIZE) // CELL_SIZE) * CELL_SIZE,
                         random.randint(0, (HEIGHT - CELL_SIZE) // CELL_SIZE) * CELL_SIZE)

    @abstractmethod
    def draw(self):
        pass
```


#Encapsulation

```python
class Snake:

    
    def __init__(self):
        self.segments = [(100, 100), (80, 100), (60, 100)]
        self.direction = 'RIGHT'
        self.grow = False

    def move(self):
        head_x, head_y = self.segments[0]
        if self.direction == 'UP':
            head_y -= CELL_SIZE
        elif self.direction == 'DOWN':
            head_y += CELL_SIZE
        elif self.direction == 'LEFT':
            head_x -= CELL_SIZE
        elif self.direction == 'RIGHT':
            head_x += CELL_SIZE
        new_head = (head_x, head_y)

        if self.grow:
            self.segments.insert(0, new_head)
            self.grow = False
        else:
            self.segments = [new_head] + self.segments[:-1]

    def change_direction(self, new_direction):
        opposite_directions = {'UP': 'DOWN', 'DOWN': 'UP', 'LEFT': 'RIGHT', 'RIGHT': 'LEFT'}
        if new_direction != opposite_directions[self.direction]:
            self.direction = new_direction

    def check_collision(self):
        head = self.segments[0]
        return (head in self.segments[1:] or 
                head[0] < 0 or head[0] >= WIDTH or 
                head[1] < 0 or head[1] >= HEIGHT)

    def grow_snake(self):
        self.grow = True

    def draw(self):
        for segment in self.segments:
            pygame.draw.rect(SCREEN, WHITE, pygame.Rect(segment[0], segment[1], CELL_SIZE, CELL_SIZE))
```

## Design Patterns 
# Factory Method Pattern

```python
class FoodFactory:
    
    @staticmethod
    def create_food(food_type):
        if food_type == "regular":
            return RegularFood()
        else:
            raise ValueError("Unknown food type")
```

#Singleton Pattern

```python
class Game:

    
    _instance = None

    def __new__(cls, *args, **kwargs):
        if cls._instance is None:
            cls._instance = super().__new__(cls, *args, **kwargs)
        return cls._instance

    def __init__(self):
        self.snake = Snake()
        self.food = FoodFactory.create_food("regular")
        self.score = 0
        self.game_over = False

    def reset(self):
        self.snake = Snake()
        self.food = FoodFactory.create_food("regular")
        self.score = 0
        self.game_over = False

    def check_food_collision(self):
        if self.snake.segments[0] == self.food.position:
            self.snake.grow_snake()
            self.food = FoodFactory.create_food("regular")
            self.score += 1

    def show_message(self, message, font_size, color, y_offset=0):
        font = pygame.font.SysFont(None, font_size)
        text = font.render(message, True, color)
        text_rect = text.get_rect(center=(WIDTH / 2, HEIGHT / 2 + y_offset))
        SCREEN.blit(text, text_rect)

    def run(self):
        running = True
        start_screen = True

        while running:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    running = False
                elif event.type == pygame.KEYDOWN:
                    if start_screen:
                        if event.key == pygame.K_RETURN:
                            start_screen = False
                    elif self.game_over:
                        if event.key == pygame.K_RETURN:
                            self.reset()
                    else:
                        if event.key == pygame.K_UP:
                            self.snake.change_direction('UP')
                        elif event.key == pygame.K_DOWN:
                            self.snake.change_direction('DOWN')
                        elif event.key == pygame.K_LEFT:
                            self.snake.change_direction('LEFT')
                        elif event.key == pygame.K_RIGHT:
                            self.snake.change_direction('RIGHT')

            if start_screen:
                SCREEN.fill(PINK)
                self.show_message("Press ENTER to Start", 50, BLACK)
            elif self.game_over:
                SCREEN.fill(PINK)
                self.show_message("GAME OVER", 50, BLACK, -50)
                self.show_message("Press ENTER to Start Again", 30, BLACK, 50)
            else:
                self.snake.move()
                if self.snake.check_collision():
                    self.game_over = True

                self.check_food_collision()

                SCREEN.fill(PINK)
                self.snake.draw()
                self.food.draw()
                self.show_message(f"Score: {self.score}", 30, BLACK, -200)
            
            pygame.display.flip()
            CLOCK.tick(10)

        pygame.quit()

if __name__ == "__main__":
    game = Game()
    game.run()
```


# Meeting Objectives and Functional Requirements
The snake moves and changes direction based on user input.
Food appears randomly on the screen, and the snake grows and the score increases upon eating the food.
The game detects collisions with the snake's body and the screen edges, ending the game appropriately.
The game displays a score and game over message, and allows restarting the game.

#Results
Success: Created an engaging and functional game loop.
Success: Implemented a reset mechanism to restart the game seamlessly.

## Conclusions
#Key Findings and Outcomes
The coursework successfully demonstrates the ability to create a classic Snake game using Python and Pygame. The implementation covers essential game mechanics and provides an engaging user experience.

#Achievements
The project achieved its goal of creating a functional Snake game, complete with smooth movement, collision detection, and a scoring system. The game runs efficiently and handles user inputs effectively.

#Future Prospects
Future improvements could include adding different levels, enhancing graphics and sound effects, and introducing new types of food with varying effects on the snake. Additionally, implementing a high score feature and more sophisticated AI for generating food could further enhance the game.






